# SPDX-FileCopyrightText: Copyright (c) 2023-2025 NVIDIA CORPORATION & AFFILIATES.
# All rights reserved.
# SPDX-License-Identifier: Apache-2.0
name: Build and push image variant

on:
  workflow_call:
    inputs:
      ARCHES:
        required: true
        type: string
      CUDA_VER:
        required: true
        type: string
      LINUX_VER:
        required: true
        type: string
      PYTHON_VER:
        required: true
        type: string
      IMAGE_REPO:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      STAGING_IMAGE_NAME:
        required: true
        type: string
      DOCKERFILE:
        required: true
        type: string
      DOCKER_TARGET:
        required: false
        type: string
      GENERATE_SBOM:
        required: false
        type: boolean
        default: false

jobs:
  run:
    name: build (${{ matrix.CUDA_VER }}, ${{ matrix.PYTHON_VER }}, ${{ matrix.LINUX_VER }}, ${{ matrix.ARCH }})
    timeout-minutes: 60
    strategy:
      max-parallel: 50
      matrix:
        ARCH: ${{ fromJSON(inputs.ARCHES) }}
        CUDA_VER: ["${{ inputs.CUDA_VER }}"]
        LINUX_VER: ["${{ inputs.LINUX_VER }}"]
        PYTHON_VER: ["${{ inputs.PYTHON_VER }}"]
      fail-fast: false
    runs-on: linux-${{ matrix.ARCH }}-cpu4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download gha-tools with git clone
        run: |
          git clone https://github.com/rapidsai/gha-tools.git -b main /tmp/gha-tools
          echo "/tmp/gha-tools/tools" >> "${GITHUB_PATH}"
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN }}
      - name: Set up Docker Context for Buildx
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders
          buildkitd-flags: --debug --config /etc/buildkit/buildkitd.toml
      - name: Generate Build Args
        id: generate-build-args
        run: ci/compute-build-args.sh
        env:
          CUDA_VER: ${{ inputs.CUDA_VER }}
          LINUX_VER: ${{ inputs.LINUX_VER }}
          PYTHON_VER: ${{ inputs.PYTHON_VER }}
          ARCH: ${{ matrix.ARCH }}
          IMAGE_REPO: ${{ inputs.IMAGE_REPO }}
      - name: Build image (staging)
        uses: docker/build-push-action@v6
        with:
          context: context
          file: ${{ inputs.DOCKERFILE }}
          pull: true
          build-args: |
            ${{ steps.generate-build-args.outputs.ARGS }}
          target: ${{ inputs.DOCKER_TARGET }}
          tags: ${{ inputs.STAGING_IMAGE_NAME }}-${{ matrix.ARCH }}
          # Enable zstd compression (gzip is default)
          # Compression level 15 is rough based on empirical testing
          # https://github.com/rapidsai/ci-imgs/pull/281#issuecomment-3001509856
          outputs: type=registry,compression=zstd,force-compression=true,oci-mediatypes=true,compression-level=15
          # Disable provenance and SBOM generation
          # https://github.com/docker/build-push-action/issues/755
          provenance: false
          sbom: false

      - name: Install Syft using curl
        if: ${{ inputs.GENERATE_SBOM }}
        run: |
          curl -sSfL https://get.anchore.io/syft | sh -s -- -b /tmp/syft
          echo "/tmp/syft" >> "${GITHUB_PATH}"
      - name: Generate SBOM (CycloneDX 1.6 JSON format)
        if: ${{ inputs.GENERATE_SBOM }}
        run: |
          IMAGE_URI="${{ inputs.STAGING_IMAGE_NAME }}-${{ matrix.ARCH }}"
          docker pull "${IMAGE_URI}"
          syft scan \
            --scope all-layers \
            --parallelism "$(nproc --all --ignore=1)" \
            --output cyclonedx-json=$(pwd)/sbom.json \
            "${IMAGE_URI}"
      - name: Embed SBOM into image
        if: ${{ inputs.GENERATE_SBOM }}
        run: |
          cat > Dockerfile.sbom <<EOF
          FROM ${{ inputs.STAGING_IMAGE_NAME }}-${{ matrix.ARCH }}
          RUN mkdir -p /sbom
          COPY sbom.json /sbom/sbom.json
          EOF
      - name: Build image with SBOM
        if: ${{ inputs.GENERATE_SBOM }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.sbom
          pull: true
          tags: ${{ inputs.IMAGE_NAME }}-${{ matrix.ARCH }}
          outputs: type=registry,compression=zstd,force-compression=true,oci-mediatypes=true,compression-level=15
          provenance: false
          sbom: false
